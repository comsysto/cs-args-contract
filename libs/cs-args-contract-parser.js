window.cs_args_contract_parser = (function(){
    /*
     * Generated by PEG.js 0.7.0.
     *
     * http://pegjs.majda.cz/
     */

    function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         *
         * For portability, we also escape escape all control and non-ASCII
         * characters. Note that "\0" and "\v" escape sequences are not used
         * because JSHint does not like the first and IE the second.
         */
        return '"' + s
            .replace(/\\/g, '\\\\')  // backslash
            .replace(/"/g, '\\"')    // closing quote character
            .replace(/\x08/g, '\\b') // backspace
            .replace(/\t/g, '\\t')   // horizontal tab
            .replace(/\n/g, '\\n')   // line feed
            .replace(/\f/g, '\\f')   // form feed
            .replace(/\r/g, '\\r')   // carriage return
            .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
            + '"';
    }

    var result = {
        /*
         * Parses the input with a generated parser. If the parsing is successfull,
         * returns a value explicitly or implicitly specified by the grammar from
         * which the parser was generated (see |PEG.buildParser|). If the parsing is
         * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
         */
        parse: function(input, startRule) {
            var parseFunctions = {
                "paramList": parse_paramList,
                "param": parse_param,
                "type": parse_type,
                "simpleType": parse_simpleType,
                "ctor": parse_ctor,
                "undefined": parse_undefined,
                "any": parse_any,
                "string": parse_string,
                "number": parse_number,
                "boolean": parse_boolean,
                "null": parse_null,
                "or": parse_or,
                "array": parse_array,
                "object": parse_object,
                "pair": parse_pair,
                "property": parse_property,
                "mandatoryParam": parse_mandatoryParam,
                "varargsParam": parse_varargsParam,
                "optionalParam": parse_optionalParam
            };

            if (startRule !== undefined) {
                if (parseFunctions[startRule] === undefined) {
                    throw new Error("Invalid rule name: " + quote(startRule) + ".");
                }
            } else {
                startRule = "paramList";
            }

            var pos = 0;
            var reportFailures = 0;
            var rightmostFailuresPos = 0;
            var rightmostFailuresExpected = [];

            function padLeft(input, padding, length) {
                var result = input;

                var padLength = length - input.length;
                for (var i = 0; i < padLength; i++) {
                    result = padding + result;
                }

                return result;
            }

            function escape(ch) {
                var charCode = ch.charCodeAt(0);
                var escapeChar;
                var length;

                if (charCode <= 0xFF) {
                    escapeChar = 'x';
                    length = 2;
                } else {
                    escapeChar = 'u';
                    length = 4;
                }

                return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
            }

            function matchFailed(failure) {
                if (pos < rightmostFailuresPos) {
                    return;
                }

                if (pos > rightmostFailuresPos) {
                    rightmostFailuresPos = pos;
                    rightmostFailuresExpected = [];
                }

                rightmostFailuresExpected.push(failure);
            }

            function parse_paramList() {
                var result0, result1, result2, result3;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_param();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 44) {
                        result1 = ",";
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\",\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = [];
                        if (input.charCodeAt(pos) === 32) {
                            result3 = " ";
                            pos++;
                        } else {
                            result3 = null;
                            if (reportFailures === 0) {
                                matchFailed("\" \"");
                            }
                        }
                        while (result3 !== null) {
                            result2.push(result3);
                            if (input.charCodeAt(pos) === 32) {
                                result3 = " ";
                                pos++;
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\" \"");
                                }
                            }
                        }
                        if (result2 !== null) {
                            result3 = parse_paramList();
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, p0, pn) { return [p0].concat(pn); })(pos0, result0[0], result0[3]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                if (result0 === null) {
                    pos0 = pos;
                    result0 = parse_param();
                    if (result0 !== null) {
                        result0 = (function(offset, p0) { return [p0]; })(pos0, result0);
                    }
                    if (result0 === null) {
                        pos = pos0;
                    }
                }
                return result0;
            }

            function parse_param() {
                var result0;

                result0 = parse_optionalParam();
                if (result0 === null) {
                    result0 = parse_varargsParam();
                    if (result0 === null) {
                        result0 = parse_mandatoryParam();
                    }
                }
                return result0;
            }

            function parse_type() {
                var result0;

                result0 = parse_or();
                if (result0 === null) {
                    result0 = parse_simpleType();
                }
                return result0;
            }

            function parse_simpleType() {
                var result0;

                result0 = parse_string();
                if (result0 === null) {
                    result0 = parse_number();
                    if (result0 === null) {
                        result0 = parse_boolean();
                        if (result0 === null) {
                            result0 = parse_null();
                            if (result0 === null) {
                                result0 = parse_undefined();
                                if (result0 === null) {
                                    result0 = parse_array();
                                    if (result0 === null) {
                                        result0 = parse_object();
                                        if (result0 === null) {
                                            result0 = parse_ctor();
                                            if (result0 === null) {
                                                result0 = parse_any();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return result0;
            }

            function parse_ctor() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (/^[A-Z]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("[A-Z]");
                    }
                }
                if (result0 !== null) {
                    result1 = [];
                    if (/^[a-zA-Z0-9_$]/.test(input.charAt(pos))) {
                        result2 = input.charAt(pos);
                        pos++;
                    } else {
                        result2 = null;
                        if (reportFailures === 0) {
                            matchFailed("[a-zA-Z0-9_$]");
                        }
                    }
                    while (result2 !== null) {
                        result1.push(result2);
                        if (/^[a-zA-Z0-9_$]/.test(input.charAt(pos))) {
                            result2 = input.charAt(pos);
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("[a-zA-Z0-9_$]");
                            }
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, first, rest) {return  {name: 'namedObject', ctorName: [first].concat(rest).join('')}; })(pos0, result0[0], result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_undefined() {
                var result0;
                var pos0;

                pos0 = pos;
                if (input.substr(pos, 9) === "undefined") {
                    result0 = "undefined";
                    pos += 9;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"undefined\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos, 5) === "undef") {
                        result0 = "undef";
                        pos += 5;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"undef\"");
                        }
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset) {return {name: 'undefined'}; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_any() {
                var result0;
                var pos0;

                pos0 = pos;
                if (input.substr(pos, 3) === "any") {
                    result0 = "any";
                    pos += 3;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"any\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset) {return {name: 'any'};})(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_string() {
                var result0;
                var pos0;

                pos0 = pos;
                if (input.substr(pos, 6) === "string") {
                    result0 = "string";
                    pos += 6;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"string\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos, 3) === "str") {
                        result0 = "str";
                        pos += 3;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"str\"");
                        }
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset) {return {name: 'string'}; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_number() {
                var result0;
                var pos0;

                pos0 = pos;
                if (input.substr(pos, 6) === "number") {
                    result0 = "number";
                    pos += 6;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"number\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos, 3) === "num") {
                        result0 = "num";
                        pos += 3;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"num\"");
                        }
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset) {return {name: 'number'}; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_boolean() {
                var result0;
                var pos0;

                pos0 = pos;
                if (input.substr(pos, 7) === "boolean") {
                    result0 = "boolean";
                    pos += 7;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"boolean\"");
                    }
                }
                if (result0 === null) {
                    if (input.substr(pos, 4) === "bool") {
                        result0 = "bool";
                        pos += 4;
                    } else {
                        result0 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"bool\"");
                        }
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset) {return {name: 'boolean'}; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_null() {
                var result0;
                var pos0;

                pos0 = pos;
                if (input.substr(pos, 4) === "null") {
                    result0 = "null";
                    pos += 4;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"null\"");
                    }
                }
                if (result0 !== null) {
                    result0 = (function(offset) {return {name: 'null'}; })(pos0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_or() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_simpleType();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 124) {
                        result1 = "|";
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"|\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_type();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, left, right) {return {name: 'or', left: left, right: right}; })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_array() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 91) {
                    result0 = "[";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"[\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_type();
                    if (result1 !== null) {
                        if (input.charCodeAt(pos) === 93) {
                            result2 = "]";
                            pos++;
                        } else {
                            result2 = null;
                            if (reportFailures === 0) {
                                matchFailed("\"]\"");
                            }
                        }
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, type) { return {name: 'array', elementType: type}; })(pos0, result0[1]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_object() {
                var result0, result1, result2, result3, result4;
                var pos0, pos1, pos2;

                pos0 = pos;
                pos1 = pos;
                if (input.charCodeAt(pos) === 123) {
                    result0 = "{";
                    pos++;
                } else {
                    result0 = null;
                    if (reportFailures === 0) {
                        matchFailed("\"{\"");
                    }
                }
                if (result0 !== null) {
                    result1 = parse_pair();
                    result1 = result1 !== null ? result1 : "";
                    if (result1 !== null) {
                        result2 = [];
                        pos2 = pos;
                        if (input.charCodeAt(pos) === 44) {
                            result3 = ",";
                            pos++;
                        } else {
                            result3 = null;
                            if (reportFailures === 0) {
                                matchFailed("\",\"");
                            }
                        }
                        if (result3 !== null) {
                            result4 = parse_pair();
                            if (result4 !== null) {
                                result3 = [result3, result4];
                            } else {
                                result3 = null;
                                pos = pos2;
                            }
                        } else {
                            result3 = null;
                            pos = pos2;
                        }
                        while (result3 !== null) {
                            result2.push(result3);
                            pos2 = pos;
                            if (input.charCodeAt(pos) === 44) {
                                result3 = ",";
                                pos++;
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\",\"");
                                }
                            }
                            if (result3 !== null) {
                                result4 = parse_pair();
                                if (result4 !== null) {
                                    result3 = [result3, result4];
                                } else {
                                    result3 = null;
                                    pos = pos2;
                                }
                            } else {
                                result3 = null;
                                pos = pos2;
                            }
                        }
                        if (result2 !== null) {
                            if (input.charCodeAt(pos) === 125) {
                                result3 = "}";
                                pos++;
                            } else {
                                result3 = null;
                                if (reportFailures === 0) {
                                    matchFailed("\"}\"");
                                }
                            }
                            if (result3 !== null) {
                                result0 = [result0, result1, result2, result3];
                            } else {
                                result0 = null;
                                pos = pos1;
                            }
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, prop0, props) {

                        var obj = {};
                        obj[prop0[0]] = prop0[1];
                        for(var i = 0; i < props.length; i+=1){
                            obj[props[i][1][0]] = props[i][1][1]
                        }
                        return {name: 'object', properties: obj};
                    })(pos0, result0[1], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_pair() {
                var result0, result1, result2;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_property();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                        result1 = ":";
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\":\"");
                        }
                    }
                    if (result1 !== null) {
                        result2 = parse_type();
                        if (result2 !== null) {
                            result0 = [result0, result1, result2];
                        } else {
                            result0 = null;
                            pos = pos1;
                        }
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, prop, type) { return [prop, type] })(pos0, result0[0], result0[2]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_property() {
                var result0, result1;
                var pos0;

                pos0 = pos;
                if (/^[a-zA-Z_$]/.test(input.charAt(pos))) {
                    result1 = input.charAt(pos);
                    pos++;
                } else {
                    result1 = null;
                    if (reportFailures === 0) {
                        matchFailed("[a-zA-Z_$]");
                    }
                }
                if (result1 !== null) {
                    result0 = [];
                    while (result1 !== null) {
                        result0.push(result1);
                        if (/^[a-zA-Z_$]/.test(input.charAt(pos))) {
                            result1 = input.charAt(pos);
                            pos++;
                        } else {
                            result1 = null;
                            if (reportFailures === 0) {
                                matchFailed("[a-zA-Z_$]");
                            }
                        }
                    }
                } else {
                    result0 = null;
                }
                if (result0 !== null) {
                    result0 = (function(offset, chars) {return chars.join('')})(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_mandatoryParam() {
                var result0;
                var pos0;

                pos0 = pos;
                result0 = parse_type();
                if (result0 !== null) {
                    result0 = (function(offset, type) {return {name: 'mandatoryParam', type: type, mandatory: true, optional: false, varargs: false};})(pos0, result0);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_varargsParam() {
                var result0, result1;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_type();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 42) {
                        result1 = "*";
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"*\"");
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, type) {return {name: 'varargsParam', type: type, mandatory: false, optional: false, varargs: true};})(pos0, result0[0]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }

            function parse_optionalParam() {
                var result0, result1;
                var pos0, pos1;

                pos0 = pos;
                pos1 = pos;
                result0 = parse_type();
                if (result0 !== null) {
                    if (input.charCodeAt(pos) === 63) {
                        result1 = "?";
                        pos++;
                    } else {
                        result1 = null;
                        if (reportFailures === 0) {
                            matchFailed("\"?\"");
                        }
                    }
                    if (result1 !== null) {
                        result0 = [result0, result1];
                    } else {
                        result0 = null;
                        pos = pos1;
                    }
                } else {
                    result0 = null;
                    pos = pos1;
                }
                if (result0 !== null) {
                    result0 = (function(offset, type) { return {name: 'optionalParam', type: type, mandatory: false, optional: true, varargs: false};})(pos0, result0[0]);
                }
                if (result0 === null) {
                    pos = pos0;
                }
                return result0;
            }


            function cleanupExpected(expected) {
                expected.sort();

                var lastExpected = null;
                var cleanExpected = [];
                for (var i = 0; i < expected.length; i++) {
                    if (expected[i] !== lastExpected) {
                        cleanExpected.push(expected[i]);
                        lastExpected = expected[i];
                    }
                }
                return cleanExpected;
            }

            function computeErrorPosition() {
                /*
                 * The first idea was to use |String.split| to break the input up to the
                 * error position along newlines and derive the line and column from
                 * there. However IE's |split| implementation is so broken that it was
                 * enough to prevent it.
                 */

                var line = 1;
                var column = 1;
                var seenCR = false;

                for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
                    var ch = input.charAt(i);
                    if (ch === "\n") {
                        if (!seenCR) { line++; }
                        column = 1;
                        seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        line++;
                        column = 1;
                        seenCR = true;
                    } else {
                        column++;
                        seenCR = false;
                    }
                }

                return { line: line, column: column };
            }


            var result = parseFunctions[startRule]();

            /*
             * The parser is now in one of the following three states:
             *
             * 1. The parser successfully parsed the whole input.
             *
             *    - |result !== null|
             *    - |pos === input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 2. The parser successfully parsed only a part of the input.
             *
             *    - |result !== null|
             *    - |pos < input.length|
             *    - |rightmostFailuresExpected| may or may not contain something
             *
             * 3. The parser did not successfully parse any part of the input.
             *
             *   - |result === null|
             *   - |pos === 0|
             *   - |rightmostFailuresExpected| contains at least one failure
             *
             * All code following this comment (including called functions) must
             * handle these states.
             */
            if (result === null || pos !== input.length) {
                var offset = Math.max(pos, rightmostFailuresPos);
                var found = offset < input.length ? input.charAt(offset) : null;
                var errorPosition = computeErrorPosition();

                throw new this.SyntaxError(
                    cleanupExpected(rightmostFailuresExpected),
                    found,
                    offset,
                    errorPosition.line,
                    errorPosition.column
                );
            }

            return result;
        },

        /* Returns the parser source code. */
        toSource: function() { return this._source; }
    };

    /* Thrown when a parser encounters a syntax error. */

    result.SyntaxError = function(expected, found, offset, line, column) {
        function buildMessage(expected, found) {
            var expectedHumanized, foundHumanized;

            switch (expected.length) {
                case 0:
                    expectedHumanized = "end of input";
                    break;
                case 1:
                    expectedHumanized = expected[0];
                    break;
                default:
                    expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
                        + " or "
                        + expected[expected.length - 1];
            }

            foundHumanized = found ? quote(found) : "end of input";

            return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }

        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
    };

    result.SyntaxError.prototype = Error.prototype;

    return result;
})();