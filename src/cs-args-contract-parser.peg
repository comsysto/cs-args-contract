 /*
  * Copyright 2015 Otto Krammer
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  */

paramList
  = ws p0:param ws "," ws pn:paramList ws { return [p0].concat(pn); }
  / ws p0:param ws { return [p0]; }

param
  = optionalParam / varargsParam / mandatoryParam


expression
  = chars: [^}]+ { return chars.join(''); }

complexType
  = or / and / simpleType

simpleType
  = not
  / type:suffixType ws "{{" expression:expression "}}" { type.expression = expression; return type; }
  / suffixType

suffixType
 = array_ts / nativeType

nativeType
  = string / number / boolean / date / function / regex / null / undefined / hash / object / ctor / any / array_legacy / not / bracketed

string
    = ("string" / "str") {return {name: 'string'}; }

number
    = ("number" / "num") {return {name: 'number'}; }

boolean
    = ("boolean" / "bool") {return {name: 'boolean'}; }

date
    = "date" {return {name: 'date'}}

regex
    = "regex" "p"? {return {name: 'regex'}}

function
    = ("function" / "func") {return {name: 'function'}; }

null
    = "null" {return {name: 'null'}; }

undefined
  = ("undefined" / "undef") {return {name: 'undefined'}; }

any
    = "any" {return {name: 'any'};}

array_ts
    = type:nativeType ws "[" ws "]" { return {name: 'array', elementType: type}; }

array_legacy
    = "[" ws type:complexType ws "]" { return {name: 'array', elementType: type}; }

object
    = "{" ws prop0:(propertyAndType)? ws props:( ws "," ws propertyAndType)* ws "}"
    {
        var obj = {};
        if(typeof(prop0[0]) !== 'undefined'){
            obj[prop0[0]] = prop0[1];
        }
        for(var i = 0; i < props.length; i+=1){
          obj[props[i][3][0]] = props[i][3][1]
        }
        return {name: 'object', properties: obj};
    }

hash
    = "{" ws "*" ws ":" ws valueType:complexType ws "}"
    {
        return {name: 'hash', valueType:valueType};
    }

propertyAndType
    = prop:propertyName ws ":" ws  type:complexType { return [prop, type] }

propertyName
    = chars:[a-zA-Z_$]+ {return chars.join('')}

ctor
 = first:[A-Z] rest:[a-zA-Z0-9_$]* {return  {name: 'namedObject', ctorName: [first].concat(rest).join('')}; }


or
  = left:simpleType ws "|" ws right:complexType {return {name: 'or', left: left, right: right}; }

and
  = left:simpleType ws "&" ws right:complexType {return {name: 'and', left: left, right: right}; }


not
  = "!" ws type:simpleType {return {name: 'not', type: type};}

bracketed
  = "(" ws type:complexType ws ")" { return type; }


mandatoryParam
  = type:complexType {return {name: 'mandatoryParam', type: type, mandatory: true, optional: false, varargs: false};}


varargsParam
  = type:complexType ws "*" {return {name: 'varargsParam', type: type, mandatory: false, optional: false, varargs: true};}

optionalParam
  = type:complexType ws "?"  { return {name: 'optionalParam', type: type, mandatory: false, optional: true, varargs: false};}

ws = " "*
