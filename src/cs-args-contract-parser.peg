 /*
  * Copyright 2013 Otto Krammer
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  */
paramList
  = p0: param ","" "* pn: paramList { return [p0].concat(pn); }
  / p0: param { return [p0]; }

param =
  optionalParam / varargsParam / mandatoryParam

type
  = or / and / simpleType

simpleType
  = string / number / boolean / function / null / undefined / array  / object / ctor / any / not / bracketed

string
    = ("string" / "str") {return {name: 'string'}; }

number
    = ("number" / "num") {return {name: 'number'}; }

boolean
    = ("boolean" / "bool") {return {name: 'boolean'}; }

function
    = ("function" / "func") {return {name: 'function'}; }

null
    = "null" {return {name: 'null'}; }

undefined
  = ("undefined" / "undef") {return {name: 'undefined'}; }

any
    = "any" {return {name: 'any'};}

array
    = "[" type:type "]" { return {name: 'array', elementType: type}; }

object
    = "{" prop0:(propertyAndType)? props: (","propertyAndType)* "}"
    {
        var obj = {};
        obj[prop0[0]] = prop0[1];
        for(var i = 0; i < props.length; i+=1){
          obj[props[i][1][0]] = props[i][1][1]
        }
        return {name: 'object', properties: obj};
    }

propertyAndType
    = prop:propertyName ":" type:type { return [prop, type] }

propertyName
    = chars:[a-zA-Z_$]+ {return chars.join('')}

ctor
 = first:[A-Z] rest:[a-zA-Z0-9_$]* {return  {name: 'namedObject', ctorName: [first].concat(rest).join('')}; }


or
  = left:simpleType "|" right:type {return {name: 'or', left: left, right: right}; }

and
  = left:simpleType "&" right:type {return {name: 'and', left: left, right: right}; }


not
  = "!" type:simpleType {return {name: 'not', type: type};}

bracketed
  = "(" type:type ")" { return type; }


mandatoryParam
  = type:type {return {name: 'mandatoryParam', type: type, mandatory: true, optional: false, varargs: false};}


varargsParam
  = type:type "*" {return {name: 'varargsParam', type: type, mandatory: false, optional: false, varargs: true};}

optionalParam
  = type:type "?"  { return {name: 'optionalParam', type: type, mandatory: false, optional: true, varargs: false};}

