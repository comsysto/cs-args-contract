
paramList
  = p0: param ","" "* pn: paramList { return [p0].concat(pn); }
  / p0: param { return [p0]; }

param =
  optionalParam / varargsParam / mandatoryParam

type
  = or / simpleType

simpleType
  = string / number / boolean / null / undefined / array / function / object / ctor / any

ctor
 = first:[A-Z] rest:[a-zA-Z0-9_$]* {return  {name: 'namedObject', ctorName: [first].concat(rest).join('')}; }

undefined
  = ("undefined" / "undef") {return {name: 'undefined'}; }

any
  = "any" {return {name: 'any'};}


string
  = ("string" / "str") {return {name: 'string'}; }

number
  = ("number" / "num") {return {name: 'number'}; }

boolean
  = ("boolean" / "bool") {return {name: 'boolean'}; }

function
  = ("function" / "func") {return {name: 'function'}; }


null
  = "null" {return {name: 'null'}; }

or
  = left:simpleType "|" right:type {return {name: 'or', left: left, right: right}; }

array
  = "[" type:type "]" { return {name: 'array', elementType: type}; }

object
  = "{" prop0:(pair)? props: (","pair)* "}"
{

  var obj = {};
  obj[prop0[0]] = prop0[1];
  for(var i = 0; i < props.length; i+=1){
    obj[props[i][1][0]] = props[i][1][1]
  }
  return {name: 'object', properties: obj};
}

pair
  = prop:property ":" type:type { return [prop, type] }

property
  = chars:[a-zA-Z_$]+ {return chars.join('')}

mandatoryParam
  = type:type {return {name: 'mandatoryParam', type: type, mandatory: true, optional: false, varargs: false};}


varargsParam
  = type:type "*" {return {name: 'varargsParam', type: type, mandatory: false, optional: false, varargs: true};}

optionalParam
  = type:type "?"  { return {name: 'optionalParam', type: type, mandatory: false, optional: true, varargs: false};}

